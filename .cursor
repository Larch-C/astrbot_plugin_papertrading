# AstrBot 模拟A股交易插件开发规范

## 项目概述
这是一个用于AstrBot框架的模拟A股交易插件，适用于aicqhttp平台。该插件允许用户在QQ群/私聊中进行虚拟的A股交易操作。

## 严格遵循的开发规范

### 1. 插件结构规范 (基于 https://docs.astrbot.app/dev/star/plugin.html)

#### 必要文件：
- `main.py`: 主要插件逻辑文件
- `metadata.yaml`: 插件元数据信息
- `README.md`: 插件说明文档
- `requirements.txt`: 依赖库声明（如需要）

#### 插件类结构要求：
```python
from astrbot.api.event import filter, AstrMessageEvent, MessageEventResult
from astrbot.api.star import Context, Star, register
from astrbot.api import logger

@register("插件名", "作者", "描述", "版本", "仓库地址")
class PluginName(Star):
    def __init__(self, context: Context):
        super().__init__(context)
    
    async def initialize(self):
        """异步初始化方法"""
        pass
    
    @filter.command("指令名")
    async def command_handler(self, event: AstrMessageEvent):
        """指令处理方法"""
        yield event.plain_result("回复内容")
    
    async def terminate(self):
        """插件卸载时的清理方法"""
        pass
```

### 2. metadata.yaml 规范
```yaml
name: papertrading  # 插件唯一标识符，全小写，无空格
desc: AstrBot模拟A股交易插件，支持虚拟炒股操作  # 插件描述
version: v1.0.0  # 版本号格式：v主版本.次版本.修订版本
author: YourName  # 作者名称
repo: https://github.com/username/astrbot_plugin_papertrading  # 仓库地址
```

### 3. 核心功能开发要求

#### A. 指令系统设计
- `/买入 <股票代码> <数量>` - 购买股票
- `/卖出 <股票代码> <数量>` - 出售股票
- `/查询 [股票代码]` - 查询股票信息或持仓
- `/资产` - 查看总资产情况
- `/排行榜` - 查看群内交易排行
- `/重置` - 重置个人账户

#### B. 数据存储规范
- **严格要求**: 所有持久化数据必须存储在 `data/` 目录下，不得存储在插件目录
- 用户数据文件路径示例: `data/papertrading/users/`
- 股票数据缓存路径: `data/papertrading/cache/`
- 配置文件路径: `data/papertrading/config/`

#### C. 异步编程要求
- **必须使用异步编程**: 所有网络请求、文件操作使用async/await
- **禁止同步库**: 不得使用 `requests`，必须使用 `aiohttp` 或 `httpx`
- **数据库操作**: 使用异步数据库驱动如 `aiosqlite`

### 4. API集成规范

#### A. 股票数据获取
- 推荐使用免费的股票API（如新浪财经、东方财富等）
- 必须实现缓存机制，避免频繁请求
- 需要错误处理和重试机制

#### B. 消息处理规范
```python
@filter.command("买入")
async def buy_stock(self, event: AstrMessageEvent):
    """购买股票指令处理"""
    try:
        # 解析用户输入
        message_parts = event.message_str.split()
        if len(message_parts) < 3:
            yield event.plain_result("❌ 格式错误，请使用：/买入 股票代码 数量")
            return
        
        stock_code = message_parts[1]
        quantity = int(message_parts[2])
        
        # 业务逻辑处理
        result = await self.process_buy_order(event.sender_id, stock_code, quantity)
        
        # 返回结果
        yield event.plain_result(result)
        
    except Exception as e:
        logger.error(f"买入指令处理错误: {e}")
        yield event.plain_result("❌ 系统错误，请稍后重试")
```

### 5. 错误处理和日志记录

#### A. 日志记录规范
```python
from astrbot.api import logger

# 信息日志
logger.info("用户购买股票成功")
# 警告日志
logger.warning("股票代码不存在")
# 错误日志
logger.error("网络请求失败", exc_info=True)
```

#### B. 异常处理要求
- 所有可能出错的操作必须包装在try-except中
- 网络请求必须设置超时和重试
- 用户输入必须进行验证和清理

### 6. 代码质量要求

#### A. 代码风格
- 使用 `ruff` 进行代码格式化
- 遵循PEP 8编码规范
- 函数和类必须有docstring

#### B. 注释要求
- 每个方法必须有详细的docstring
- 复杂逻辑必须有行内注释
- 配置项必须有说明注释

### 7. 测试和调试

#### A. 本地测试
- 在AstrBot主程序中进行测试
- 使用WebUI的"重载插件"功能进行热更新
- 确保所有指令都能正确响应

#### B. 错误场景测试
- 测试网络异常情况
- 测试无效用户输入
- 测试并发访问场景

### 8. 性能和安全要求

#### A. 性能优化
- 实现股票数据缓存机制
- 避免频繁的数据库查询
- 使用连接池管理数据库连接

#### B. 安全考虑
- 验证用户输入，防止注入攻击
- 限制单用户操作频率
- 保护用户隐私数据

### 9. 部署和维护

#### A. 依赖管理
- 在requirements.txt中明确列出所有依赖
- 指定依赖版本号，确保兼容性

#### B. 更新机制
- 提供数据迁移脚本
- 保持向后兼容性
- 详细的更新日志

## 开发流程

1. **需求分析**: 明确功能需求和用户场景
2. **架构设计**: 设计数据结构和API接口
3. **核心开发**: 按照上述规范开发核心功能
4. **测试验证**: 全面测试各种场景
5. **文档编写**: 完善README和使用说明
6. **代码审查**: 使用ruff检查代码质量
7. **部署发布**: 发布到GitHub并提供安装说明

## 注意事项

- **严格遵循AstrBot API**: 不要直接操作底层协议
- **数据一致性**: 确保交易数据的一致性和准确性
- **用户体验**: 提供清晰的操作指引和错误提示
- **可扩展性**: 为未来功能扩展预留接口
- **社区友好**: 遵循开源最佳实践，欢迎贡献

参考文档: https://docs.astrbot.app/dev/star/plugin.html
